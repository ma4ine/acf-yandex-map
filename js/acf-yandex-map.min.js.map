{"version":3,"sources":["acf-yandex-map.js"],"names":["$","acf_yandex_locale","blog_url","templateURL","template_url","term_slug","post_type","term_id","console","log","polygon_style","fillColor","strokeColor","strokeWidth","opacity","initialize_field","$el","$element","$input","$params","$collection","$map_active","$map","$project","find","undefined","error","map_init_fail","parseJSON","val","data","when","get","response","features","length","each","index","id","content","type","geometry","term","coords","coordinates","done","ymaps","ready","map_init","fail","empty","destroy","Map","zoom","center","center_lat","center_lng","minZoom","controls","remove","behaviors","disable","copyrights","add","events","e","create_mark","save_map","zoom_control","control","ZoomControl","event","top","left","clear_button","Button","btn_clear_all","title","btn_clear_all_hint","options","selectOnClick","geoObjects","mark","right","GeoObjectCollection","preset","place_mark","marker_type","toLowerCase","mark_id","Placemark","hintContent","Polygon","import_mark","marks","circle_size","size","draggable","editorDrawingCursor","editorMaxPoints","editor","startDrawing","Monitor","state","newValue","getZoom","getCenter","getType","split","_type","push","properties","getCoordinates","getRadius","JSON","stringify","acf","add_action","get_fields","this","document","on","postbox","jQuery"],"mappings":"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","file":"acf-yandex-map.min.js","sourcesContent":["(function ($) {\n\n    'use strict';\n\n    /**\n     * Get ACF data\n     */\n    var blogURL = acf_yandex_locale.blog_url;\n    var templateURL = acf_yandex_locale.template_url;\n    var postType = acf_yandex_locale.post_type;\n    var termID = acf_yandex_locale.term_id;\n    var term_slug = acf_yandex_locale.term_slug;\n\n    console.log(term_slug);\n\n    var polygon_style = {\n        fillColor: '#44A147',\n        strokeColor: '#18803F',\n        strokeWidth: 2,\n        opacity: 0.5\n    };\n\n    /**\n     * Initialize admin interface\n     *\n     * @param {element} $el\n     * @returns {boolean}\n     */\n    function initialize_field($el) {\n\n        /**\n         * Element for map init\n         * @type {element}\n         */\n        var $element;\n\n        /**\n         * Hidden data input\n         * @type {element}\n         */\n        var $input;\n\n        /**\n         * Saved data or default\n         *\n         * @param {float} $params.center_lat\n         * @param {float} $params.center_lng\n         * @param {string} $params.type\n         * @param {int} $params.zoom\n         * @param {Object[]} $params.marks\n         *\n         * @type {object}\n         */\n        var $params;\n\n        /**\n         * Yandex map object\n         *\n         * @type {Object}\n         */\n        var $map = null;\n\n        /**\n         * Project objects\n         *\n         * @type {array}\n         */\n        var $project = [];\n\n        /**\n         * Project collection\n         *\n         * @type {object}\n         */\n        var $collection;\n\n        /**\n         * Project collection\n         *\n         * @type {boolean}\n         */\n        var $map_active;\n\n        /// Init fields\n\n        $element = $($el).find('.map');\n        $input = ($el).find('.map-input');\n\n        if ($element == undefined || $input == undefined) {\n            console.error(acf_yandex_locale.map_init_fail);\n            return false;\n        }\n\n        /// Init params\n\n        $params = $.parseJSON($($input).val());\n\n        /// Import data & map init\n\n        if ( term_slug != 'no-project' && term_slug != undefined ) {\n\n            console.log('Import start');\n\n            var data = templateURL + '/map/data-land-' + term_slug + '.json';\n\n            $.when(\n\n                $.get(data, function(response) {\n\n                    if ( response.features.length > 0 ) {\n\n                        $.each(response.features, function(index, val) {\n                            $project[index] = {\n                                \"id\": val.id,\n                                \"content\": val.id,\n                                \"type\": val.geometry.type,\n                                \"term\": val.term,\n                                \"coords\": val.geometry.coordinates\n                            };\n                        });\n\n                    } else {\n\n                        console.error('Data import error!');\n\n                    }\n\n                })\n\n            ).done(function() {\n\n                console.log('Import success & map start');\n                console.log($project);\n\n                ymaps.ready(function () {\n                    map_init();\n                });\n\n            }).fail(function() {\n\n                console.error('Data import error!');\n\n            });\n\n        } else {\n\n            console.log('Just map start');\n\n            ymaps.ready(function () {\n                map_init();\n            });\n\n        };\n\n        /// Init map\n\n        // ymaps.ready(function () {\n        //     map_init();\n        // });\n\n        /**\n         * Initialization Map\n         */\n        function map_init() {\n\n            $element.empty();\n\n            if ($map != null) {\n                $map.destroy();\n                $map = null;\n                $input.val('');\n            }\n\n            $map = new ymaps.Map($element[0], {\n                zoom: $params.zoom,\n                center: [$params.center_lat, $params.center_lng],\n                type: 'yandex#' + $params.type\n            }, {\n                minZoom: 10\n            });\n\n            $map.controls.remove('trafficControl');\n            $map.controls.remove('fullscreenControl');\n            $map.controls.remove('searchControl');\n            $map.behaviors.disable('scrollZoom');\n            $map.copyrights.add('&copy; DKI ');\n\n            $map.events.add('click', function (e) {\n                if ($map_active) {\n                    create_mark(e.get('coords'));\n                    save_map();\n                }\n            });\n\n            $map.events.add('typechange', function (e) {\n                save_map();\n            });\n\n            $map.events.add('boundschange', function () {\n                save_map();\n            });\n\n            /// Geo location button\n\n            var geo_control = $map.controls.get('geolocationControl');\n            geo_control.events.add('locationchange', function () {\n                save_map();\n            });\n\n            /// Zoom Control\n\n            var zoom_control = new ymaps.control.ZoomControl();\n            zoom_control.events.add('zoomchange', function (event) {\n                save_map();\n            });\n\n            $map.controls.add(zoom_control, {top: 75, left: 5});\n\n            /// Clear all button\n\n            var clear_button = new ymaps.control.Button({\n                data: {\n                    content: acf_yandex_locale.btn_clear_all,\n                    title: acf_yandex_locale.btn_clear_all_hint\n                },\n                options: {\n                    selectOnClick: false\n                }\n            });\n\n            clear_button.events.add('click', function () {\n                $map.geoObjects.each(function (mark) {\n                    if (mark.geometry != null) { // if not collection\n                        $map.geoObjects.remove(mark);\n                    };\n                });\n                $map_active = true;\n                save_map();\n            });\n\n            $map.controls.add(clear_button, {top: 5, right: 5});\n\n            /// Collection\n\n            $collection = new ymaps.GeoObjectCollection(null, {\n                preset: 'islands#yellowIcon'\n            });\n\n            /// Marks import\n\n            $($project).each(function(index, mark) {\n                import_mark(mark.coords, mark.type, mark.term, mark.id);\n            });\n\n            /// Import load\n\n            $map.geoObjects.add($collection);\n\n            /// Marks load\n\n            $($params.marks).each(function (index, mark) {\n                create_mark(mark.coords, mark.type, mark.circle_size, mark.id, mark.content);\n            });\n\n        }\n\n        /**\n         * Import geo mark\n         *\n         * @param {Array} coords\n         * @param {string} type Point type, Point or Circle\n         * @param {int} term\n         * @param {int} id\n         * @param {string} content\n         */\n        function import_mark(coords, type, term, id) {\n\n            // console.log(type);\n\n            var place_mark = null;\n            var marker_type = type.toLowerCase();\n            var mark_id = id;\n\n            if (marker_type == 'point') { // create placemark\n\n                place_mark = new ymaps.Placemark(coords,\n                    {\n                        // iconContent: mark_id,\n                        hintContent: mark_id\n                    }, \n                    {}\n                );\n\n            } else if (marker_type == 'polygon') {\n\n                place_mark = new ymaps.Polygon(coords,\n                    {\n                        hintContent: mark_id\n                    },\n                    polygon_style\n                );\n\n            } else {\n\n                console.error('Mark import error!')\n                return false;\n\n            }\n\n            $collection.add(place_mark);\n        }\n\n        /**\n         * Create geo mark\n         *\n         * @param {Array} coords\n         * @param {string} type Point type, Point or Circle\n         * @param {int} size Circle size in meters\n         * @param {int} id\n         * @param {string} content\n         */\n        function create_mark(coords, type, size, id, content) {\n\n            var place_mark = null;\n            var marker_type = (type != null) ? type.toLowerCase() : $($el).find('.marker-type').val();\n\n            console.log(marker_type);\n\n            var mark_id = id;\n            if (id == undefined && $params.marks.length == 0)\n                mark_id = 1;\n            else\n                mark_id = (id == undefined) ? ($params.marks[$params.marks.length - 1].id + 1) : id;\n\n            var mark_content = (content == undefined) ? '' : content;\n\n            if (marker_type == 'point') { // create placemark\n\n                place_mark = new ymaps.Placemark(coords, {}, {\n                        draggable: true\n                    }\n                );\n\n                $map.geoObjects.add(place_mark);\n\n                $map_active = false;\n\n            } else if (marker_type == 'polygon') { // if mark is polygon\n\n                if (coords.length === 2) {\n                    coords = [];\n                };\n\n                var place_mark = new ymaps.Polygon(coords, {}, {\n                    editorDrawingCursor: \"crosshair\",\n                    editorMaxPoints: 5,\n                    fillColor: '#44A147',\n                    strokeColor: '#18803F',\n                    strokeWidth: 2,\n                    opacity: 1\n                });\n\n                $map.geoObjects.add(place_mark);\n\n                place_mark.editor.startDrawing();\n\n                var stateMonitor = new ymaps.Monitor(place_mark.editor.state);\n                stateMonitor.add(\"drawing\", function (newValue) {\n                    $map_active = false;\n                });\n\n            } else {\n\n                console.error('Marker type error!');\n                return false;\n\n            }\n\n            place_mark.events.add('dragend', function () {\n                save_map();\n            });\n            place_mark.events.add('editorstatechange', function () {\n                save_map();\n            });\n            place_mark.events.add('geometrychange', function () {\n                save_map();\n            });\n\n        }\n\n        /**\n         * Write map data in hidden field\n         */\n        function save_map() {\n\n            $params.zoom = $map.getZoom();\n\n            var coords = $map.getCenter();\n            $params.center_lat = coords[0];\n            $params.center_lng = coords[1];\n\n            var type = $map.getType().split('#');\n            $params.type = (type[1]) ? type[1] : 'map';\n\n            var marks = [];\n            $map.geoObjects.each(function (mark) {\n                if (mark.geometry != null) { // if not collection\n                    var _type = mark.geometry.getType();\n                    marks.push({\n                        id: mark.properties.get('id'),\n                        content: mark.properties.get('content'),\n                        type: _type,\n                        coords: mark.geometry.getCoordinates(),\n                        circle_size: (_type == 'Circle') ? mark.geometry.getRadius() : 0\n                    });\n                };\n            });\n\n            $params.marks = marks;\n\n            $($input).val(JSON.stringify($params));\n        }\n\n        /**\n         * Change marker type state\n         */\n        // $('.marker-type').on('change', function () {\n        //     var label = $(this).parent().next('th').children(0);\n        //     var select = $(this).parent().next('th').next('td').children(0);\n        //     if (this.value == 'circle') {\n        //         label.removeClass('hidden');\n        //         select.removeClass('hidden');\n        //     } else {\n        //         label.addClass('hidden');\n        //         select.addClass('hidden');\n        //     }\n        // });\n\n    }\n\n\n    if (typeof acf.add_action !== 'undefined') {\n\n        /*\n         *  ready append (ACF5)\n         *\n         *  These are 2 events which are fired during the page load\n         *  ready = on page load similar to $(document).ready()\n         *  append = on new DOM elements appended via repeater field\n         *\n         *  @type\tevent\n         *  @date\t20/07/13\n         *\n         *  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n         *  @return\tn/a\n         */\n\n        acf.add_action('ready append', function ($el) {\n\n            // search $el for fields of type 'FIELD_NAME'\n            acf.get_fields({type: 'yandex-map'}, $el).each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    } else {\n\n\n        /*\n         *  acf/setup_fields (ACF4)\n         *\n         *  This event is triggered when ACF adds any new elements to the DOM.\n         *\n         *  @type\tfunction\n         *  @since\t1.0.0\n         *  @date\t01/01/12\n         *\n         *  @param\tevent\t\te: an event object. This can be ignored\n         *  @param\tElement\t\tpostbox: An element which contains the new HTML\n         *\n         *  @return\tn/a\n         */\n\n        $(document).on('acf/setup_fields', function (e, postbox) {\n\n            $(postbox).find('.field[data-field_type=\"yandex-map\"]').each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    }\n\n\n})(jQuery);"]}