{"version":3,"sources":["acf-yandex-map.js"],"names":["$","acf_yandex_locale","blog_url","templateURL","template_url","$term_slug","post_type","term_id","term_slug","initialize_field","$el","$element","$input","$params","$collection","$map","$map_active","find","undefined","console","error","map_init_fail","map_init","empty","destroy","val","ymaps","Map","zoom","center","center_lat","center_lng","type","minZoom","controls","remove","behaviors","disable","events","add","e","create_mark","get","save_map","zoom_control","control","ZoomControl","event","top","left","clear_button","Button","data","content","btn_clear_all","title","btn_clear_all_hint","options","selectOnClick","geoObjects","removeAll","right","GeoObjectCollection","preset","strokeWidth","geodesic","log","marks","each","index","mark","coords","id","term","place_mark","marker_type","toLowerCase","mark_id","length","mark_content","Placemark","iconContent","hintContent","this","Polygon","draggable","editorDrawingCursor","editorMaxPoints","fillColor","strokeColor","editor","startDrawing","properties","set","getZoom","getCenter","getType","split","_type","geometry","push","getCoordinates","JSON","stringify","parseJSON","ready","when","response","features","coordinates","done","fail","on","label","parent","next","children","select","value","removeClass","addClass","acf","add_action","get_fields","document","postbox","jQuery"],"mappings":"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","file":"acf-yandex-map.min.js","sourcesContent":["(function ($) {\n\n    // 'use strict';\n\n    /**\n     * Get ACF data\n     */\n    // var $district = $('[data-name=\"location-district\"] input').val();\n    // var $city = $('[data-name=\"location-city\"] select option[selected=\"selected\"]').text();\n    // var $address = $('[data-name=\"location-address\"] input').val();\n    // var $location = $district + ', ' + $city + ', ' + $address;\n\n    var blogURL = acf_yandex_locale.blog_url;\n    var templateURL = acf_yandex_locale.template_url;\n    var postType = acf_yandex_locale.post_type;\n    var termID = acf_yandex_locale.term_id;\n    var $term_slug = acf_yandex_locale.term_slug;\n\n    var $polygon_style = {\n        fillColor: '#44A147',\n        strokeColor: '#18803F',\n        strokeWidth: 2,\n        opacity: 0.75\n    };\n\n    /**\n     * AJAX projects JSON\n     */\n    function getLands() {\n\n        // console.log(blogURL + '/wp-json/wp/v2/land?project=' + termID);\n\n        $.get({\n            dataType: 'json',\n            url: blogURL + '/wp-json/wp/v2/land?project=' + termID,\n            success: function(response) {\n\n                // console.log(response);\n\n                var data = {\n                    type: 'FeatureCollection',\n                    features: []\n                };\n\n                $.each(response, function(index, post) {\n\n                    // Обработаем некоторые данные заранее\n                    var address = post.acf['location-district'] + ', ' + post.acf['location-city']['name'] + ', ' + post.acf['location-address'];\n\n                    var square = post.acf[ 'land-square' ] + ' сот.';\n\n                    if ( post.acf['landscape-pic'].length > 0 ) {\n                        var slope = '<img src=\"' + templateURL + '/svg/landscape/' + post.acf['landscape-pic'] +'.svg\" alt=\"Ландшафт\" class=\"slope--img slope--img-hor\">';\n                    } else {\n                        var slope = '';\n                    }\n\n                    if ( post.acf.status != undefined ) {\n                        var status = post.acf.status.name;\n                    };\n\n                    // Проверим наличие плагина, распарсим данные\n                    if ( post.acf.ymap != undefined ) {\n                        var json = $.parseJSON(post.acf.ymap);\n                    };\n\n                    if ( post.acf.ymap != undefined && json.marks.length > 0 ) { // Если установлены координаты в плагине\n                        // Получим координаты из плагина\n                        var coords = json.marks[0].coords;\n                        // Определим геометрию объекта\n                        var geometryType = coords.length === 1 ? 'Polygon' : 'Point';\n\n                    // } else { // синхрона не будет, тормозит\n\n                        // Если нет, получим координаты из Геокодера\n                        // var defaultCoords;\n\n                        // $.get({\n                        //     async: false,\n                        //     url: 'https://geocode-maps.yandex.ru/1.x/?format=json&geocode=' + address.replace( ', ', '+' ),\n                        //     success: function(data) {\n                        //         defaultCoords = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\n                        //     }\n                        // }); \n\n                        // var coords = defaultCoords.split(' ').reverse();\n                        // var geometryType = 'Point';\n\n                    }; // Координаты определены\n\n                    var dataItem = {\n                        type: 'Feature',\n                        postType: post.type, \n                        id: post.id,\n                        link: post.link,\n                        options: polygonStyle,\n                        geometry: {\n                            type: geometryType,\n                            coordinates: coords\n                        },\n                        properties: {\n                            balloonContentHeader: \n                                '<div class=\"module--header\">' +\n                                    '<div class=\"module--title module--title-available\">Участок №' + post.acf['land-id'] + '</div>' +\n                                    '<div class=\"module--status status status-nopadding js-status\">' + status + '</div>' +\n                                '</div>',\n                            balloonContentBody: \n                                '<div class=\"module--body\">' +\n                                    '<div class=\"module--item module--item-50 common_item\">' +\n                                        '<div class=\"common_item--title\"><em>Площадь участка</em></div>' +\n                                        '<div class=\"common_item--value\">' + square + '</div>' +\n                                    '</div>' +\n                                    '<div class=\"module--item module--item-50 common_item\">' +\n                                        '<div class=\"common_item--title\"><em>Стоимость</em></div>' +\n                                        '<div class=\"common_item--value\"><span class=\"js-money\">' + post.acf.price + '</span> ₽</div>' +\n                                    '</div>' +\n                                    '<div class=\"module--item icb d-none d-lg-block\">' +\n                                        '<i class=\"icb--icon icon icon-mountain\"></i>' +\n                                        '<div class=\"icb--title\">' + post.acf['spec-land'].mountain + '</div>' +\n                                    '</div>' +\n                                    '<div class=\"module--item slope slope-hor d-none d-lg-flex\">' +\n                                        '<div class=\"slope--title slope--title-hor\">Уклон участка</div>' +\n                                        slope + \n                                        '<div class=\"slope--subtitle slope--subtitle-hor js-typo\">' + post.acf['landscape-descr'] + '</div>' +\n                                    '</div>' +\n                                '</div>',\n                            balloonContentFooter:\n                                '<div class=\"module--footer\">' +\n                                    // Temporary disabled modal desktop link\n                                    // '<button type=\"button\" class=\"module--more d-none d-lg-inline-block\" data-toggle=\"modal\" data-target=\"#objectModal\">Подробнее об участке</button>' +\n                                    // '<a href=\"' + post.link + '\" class=\"module--more d-lg-none\">Подробнее об участке</a>' +\n                                    '<a href=\"' + post.link + '\" class=\"module--more\">Подробнее об участке</a>' +\n                                    '<button type=\"button\" class=\"module--but but but-green\" data-toggle=\"modal\" data-target=\"#orderModal\">Забронировать</button>' +\n                                '</div>',\n                            hintContent: address\n                        }\n                    };\n\n                    data['features'].push( dataItem );\n                     \n                }); // each end\n\n                // postData( data, 'project', projectName );\n\n            }, // success end\n            error: function(data) {\n                // `data` will not be JSON\n                console.log('JSON Error');\n            }\n\n        });\n\n    };\n\n    // getLands();\n\n    function postData( data, postType, name ) {\n\n        // new post\n        if ( postType === 'project' ) {\n\n            $.when(\n                // Post project\n                $.post({\n                    url : templateURL + '/map/ajax-map.php',\n                    data : {\n                        postType: postType,\n                        name: name,\n                        json : JSON.stringify(data, \"\", 2)\n                    },\n                    success: function(response) {\n                        console.log('AJAX POST ' + postType.toUpperCase());\n                    }\n                })\n            ).then(function() {\n                // All is ready now, so...\n            });\n            \n        // } else {\n\n        //     $.when(\n        //         // Post \"postType\"\n        //         $.post({\n        //             url : templateURL + '/ajax/ajax-map.php',\n        //             data : {\n        //                 postType: postType,\n        //                 json : JSON.stringify(data, \"\", 2)\n        //             },\n        //             success: function(response) {\n        //                 console.log('AJAX POST ' + postType.toUpperCase());\n        //             }\n        //         })\n        //     ).then(function() {\n        //         // All is ready now, so...\n        //         // initBigMap();\n        //         // ymaps.ready(initBigMap);\n        //         // отключено из-за дублирования карты\n        //     });\n\n        };\n\n    };\n\n    /**\n     * Initialize admin interface\n     *\n     * @param {element} $el\n     * @returns {boolean}\n     */\n    function initialize_field($el) {\n\n        /**\n         * Element for map init\n         * @type {element}\n         */\n        var $element;\n\n        /**\n         * Hidden data input\n         * @type {element}\n         */\n        var $input;\n\n        /**\n         * Saved data or default\n         *\n         * @param {float} $params.center_lat\n         * @param {float} $params.center_lng\n         * @param {string} $params.type\n         * @param {int} $params.zoom\n         * @param {Object[]} $params.marks\n         *\n         * @type {object}\n         */\n        var $params;\n\n        /**\n         * Yandex map object\n         *\n         * @type {Object}\n         */\n        var $map = null;\n\n        /**\n         * Yandex map geocoder\n         *\n         * @type {object}\n         */\n        // var $geocoder;\n\n        /**\n         * Geocoder coordinates\n         *\n         */\n        // var $coords;\n\n        /**\n         * Project collection\n         *\n         * @type {object}\n         */\n        var $collection;\n\n        /**\n         * Map edit activation\n         *\n         */\n        var $map_active = false;\n\n        /// Init fields\n\n        $element = $($el).find('.map');\n        $input = ($el).find('.map-input');\n\n        if ($element == undefined || $input == undefined) {\n            console.error(acf_yandex_locale.map_init_fail);\n            return false;\n        }\n\n        /// Init params\n\n        $params = $.parseJSON($($input).val());\n\n        /// Import objects\n        // function import_lands() {\n\n        //     return true;\n             \n        // };\n\n        /// Init map\n\n        // ymaps.ready(function () {\n        //     map_init();\n        // });\n\n        ymaps.ready(function () {\n\n            if ( $term_slug != 'no-project' ) {\n                console.log('Import start');\n                var data = templateURL + '/map/data-project-' + $term_slug + '.json';\n\n                $.when(\n                    $.get(data, function(response) {\n\n                        if ( response.features.length > 0 ) {\n                            \n                            // set default params\n                            $params.zoom = 13;\n                            $params.center_lat = 59.99914531368303;\n                            $params.center_lng = 30.72482104954271;\n                            $params.type = \"map\"\n\n                            $.each(response.features, function(index, val) {\n                                $params.marks[index] = {\n                                    \"id\": val.id,\n                                    \"content\": val.id,\n                                    \"type\": val.geometry.type,\n                                    \"term\": val.term,\n                                    \"coords\": val.geometry.coordinates\n                                };\n                            });\n\n                        };\n\n                    })\n\n                ).done(function() {\n                    map_init();\n\n                }).fail(function() {\n                    console.log('Project import error');\n                });\n\n            } else {\n\n                console.log('Just map start');\n\n                map_init();\n\n            }\n            \n\n        });\n\n        /**\n         * Initialization Map\n         */\n        function map_init() {\n\n            $element.empty();\n\n            if ($map != null) {\n                $map.destroy();\n                $map = null;\n                $input.val('');\n            }\n\n            $map = new ymaps.Map($element[0], {\n                zoom: $params.zoom,\n                center: [$params.center_lat, $params.center_lng],\n                type: 'yandex#' + $params.type\n            }, {\n                minZoom: 10\n            });\n\n            $map.controls.remove('trafficControl');\n            $map.controls.remove('fullscreenControl');\n            $map.behaviors.disable('scrollZoom');\n            // $map.copyrights.add('&copy; Const Lab. ');\n\n            // $map.events.add('click', function (e) {\n            //     create_mark(e.get('coords'));\n            //     save_map();\n            // });\n\n            $map.events.add('click', function (e) {\n\n                if ( $map_active === true ) {\n                    create_mark(e.get('coords'));\n                    save_map();\n                };\n\n            });\n\n            $map.events.add('typechange', function (e) {\n                save_map();\n            });\n\n            $map.events.add('boundschange', function () {\n                save_map();\n            });\n\n            /// Geocoder\n\n            // if ( $params.marks.length === 0 ) { // if there are no marks\n                \n            //     console.log('Geocoder works here');\n\n            //     $geocoder = ymaps.geocode( $location ); // start geocoder\n\n            //     $geocoder.then(function (res) {\n\n            //         var object = res.geoObjects.get(0); // get first object\n            //         var coords = object.geometry.getCoordinates(); // get coords\n            //         var bounds = object.properties.get('boundedBy'); // get bounds\n\n            //         create_mark(coords, 'Point', 0, 1, ''); // create mark\n\n            //         $map.setBounds(bounds, { checkZoomRange: true }); // show map with bounds\n\n            //         save_map(); // save map\n\n            //     }, function (err) {\n            //         console.log('Yandex.Maps Geocoder Error');\n            //     });\n\n            // };\n\n            /// Search Control\n\n            // var search_controll = $map.controls.get('searchControl');\n            // search_controll.options.set({\n            //     noPlacemark: true,\n            //     useMapBounds: true, // was false\n            //     noSelect: true,\n            //     kind: 'locality',\n            //     width: 250\n            // });\n\n            // search_controll.events.add('resultselect', function () {\n            //     // $map.geoObjects.removeAll(); // remove all placemarks\n            //     // create_mark(e.get('coords')); // create mark\n            //     save_map();\n            // });\n\n            /// Geo location button\n\n            // var geo_control = $map.controls.get('geolocationControl');\n            // geo_control.events.add('locationchange', function () {\n            //     // $map.geoObjects.removeAll(); // don't remove placemark\n            //     save_map();\n            // });\n\n            /// Zoom Control\n\n            var zoom_control = new ymaps.control.ZoomControl();\n            zoom_control.events.add('zoomchange', function (event) {\n                save_map();\n            });\n\n            $map.controls.add(zoom_control, {top: 75, left: 5});\n\n            /// Clear all button\n\n            var clear_button = new ymaps.control.Button({\n                data: {\n                    content: acf_yandex_locale.btn_clear_all,\n                    title: acf_yandex_locale.btn_clear_all_hint\n                },\n                options: {\n                    selectOnClick: false\n                }\n            });\n\n            clear_button.events.add('click', function () {\n                // $map.balloon.close();\n                $map.geoObjects.removeAll();\n                save_map();\n                $map_active = true;\n            });\n\n            $map.controls.add(clear_button, {top: 5, right: 5});\n\n            /// Create collection\n            $collection = new ymaps.GeoObjectCollection({}, {\n                preset: \"islands#redCircleIcon\",\n                strokeWidth: 4,\n                geodesic: true\n            });\n\n            console.log($params);\n\n            /// Marks load\n            $($params.marks).each(function (index, mark) {\n                create_mark(mark.coords, mark.type, mark.id, mark.content, mark.term);\n            });\n\n            $map.geoObjects.add($collection);\n\n\n            // $collection.add(new ymaps.Placemark([37.61, 55.75]));\n\n            // console.log($collection);\n        }\n\n        /**\n         * Create geo mark\n         *\n         * @param {Array} coords\n         * @param {string} type Point type, Point or Circle\n         * @param {int} size Circle size in meters\n         * @param {int} id\n         * @param {string} content\n         */\n        function create_mark(coords, type, id, content, term) {\n\n            var place_mark = null;\n\n            var marker_type = (type != null) ? type.toLowerCase() : $($el).find('.marker-type').val();\n\n            var mark_id = id;\n            if (id == undefined && $params.marks.length == 0)\n                mark_id = 1;\n            else\n                mark_id = (id == undefined) ? ($params.marks[$params.marks.length - 1].id + 1) : id;\n\n            var mark_content = (content == undefined) ? '' : content;\n\n            if (marker_type == 'point') { // create placemark\n\n                place_mark = new ymaps.Placemark(\n                    coords,\n                    {\n                        iconContent: mark_id,\n                        hintContent: mark_content\n                        // hintContent: acf_yandex_locale.mark_hint\n                    }, {\n                        preset: \"islands#orangeDotIcon\",\n                        // draggable: true\n                    }\n                );\n\n                place_mark.events.add('contextmenu', function () {\n                    $map.geoObjects.remove(this);\n                    save_map();\n                    $map_active = true;\n                }, place_mark);\n\n                // place_mark.events.add('dragend', function () {\n                //     save_map();\n                // });\n                // place_mark.properties.set('id', mark_id);\n                // place_mark.properties.set('content', mark_content);\n\n                // $map.geoObjects.add(place_mark);\n\n\n            } else { // if mark is circle (polygon)\n\n                // $map.geoObjects.removeAll(); // remove all placemarks\n\n                // Если координаты всего две то сбросим их для рисования многоугольника с нуля \n                if ( coords.length === 2 ) {\n                    coords = [];\n                };\n\n                // Создаем многоугольник без вершин.\n                place_mark = new ymaps.Polygon(coords, {}, {\n                    draggable: true,\n                    // Курсор в режиме добавления новых вершин.\n                    editorDrawingCursor: \"crosshair\",\n                    // Максимально допустимое количество вершин.\n                    editorMaxPoints: 5,\n                    // Цвет заливки.\n                    fillColor: '#44A147',\n                    // Цвет обводки.\n                    strokeColor: '#18803F',\n                    // Ширина обводки.\n                    strokeWidth: 2\n                });\n\n                // place_mark.properties.set('id', mark_id);\n                // place_mark.properties.set('content', mark_content);\n\n                // Добавляем многоугольник на карту.\n                // $map.geoObjects.add(place_mark);\n\n                // В режиме добавления новых вершин меняем цвет обводки многоугольника.\n                // var stateMonitor = new ymaps.Monitor(place_mark.editor.state);\n                // stateMonitor.add(\"drawing\", function (newValue) {\n                //     place_mark.options.set(\"strokeColor\", newValue ? '#FF0000' : '#0000FF');\n                //     console.log('test');\n                //     if ( newValue === false ) {\n                //         save_map(); // сохраняем карту при окончании редактирования\n                //     };\n                // });\n\n                // Включаем режим редактирования с возможностью добавления новых вершин.\n                if ( $map_active === true) {\n                    place_mark.editor.startDrawing();\n                }\n\n            }\n\n            place_mark.properties.set('id', mark_id);\n            place_mark.properties.set('content', mark_content);\n\n            console.log(term);\n\n            // Создадим коллекцию геообъектов и зададим опции.\n            if (term != undefined) {\n\n                $collection.add(place_mark);\n\n                // console.log($collection);                \n\n            } else {\n\n                // console.log(place_mark);\n\n                place_mark.options.set('draggable', 'true');\n\n                $map.geoObjects.add(place_mark);\n\n                // Сохраним состояние карты после событий с меткой или полигоном\n                place_mark.events.add('dragend', function () {\n                    save_map();\n                });\n                place_mark.events.add('editorstatechange', function () {\n                    save_map();\n                });\n                place_mark.events.add('geometrychange', function () {\n                    save_map();\n                });\n\n            }\n\n\n            /// Выключили удаление метки правой кнопкой\n            // place_mark.events.add('contextmenu', function () {\n            //     $map.geoObjects.remove(this);\n            //     save_map();\n            // }, place_mark);\n            \n            /// Выключили балун\n            // place_mark.events.add('click', function () {\n            //     if (!this.balloon.isOpen()) {\n            //         show_mark_editor(this);\n            //     }\n            // }, place_mark);\n        }\n\n        /**\n         * Write map data in hidden field\n         */\n        function save_map() {\n\n            $params.zoom = $map.getZoom();\n\n            var coords = $map.getCenter();\n            $params.center_lat = coords[0];\n            $params.center_lng = coords[1];\n\n            var type = $map.getType().split('#');\n            $params.type = (type[1]) ? type[1] : 'map';\n\n            var marks = [];\n            $map.geoObjects.each(function (mark) {\n                var _type = mark.geometry.getType();\n                marks.push({\n                    id: mark.properties.get('id'),\n                    content: mark.properties.get('content'),\n                    type: _type,\n                    coords: mark.geometry.getCoordinates(),\n                    // circle_size: (_type == 'Circle') ? mark.geometry.getRadius() : 0\n                });\n            });\n            $params.marks = marks;\n\n            $($input).val(JSON.stringify($params));\n\n            $map_active = false;\n        }\n\n        /**\n         * Change marker type state\n         */\n        $('.marker-type').on('change', function () {\n            var label = $(this).parent().next('th').children(0);\n            var select = $(this).parent().next('th').next('td').children(0);\n            if (this.value == 'circle') {\n                label.removeClass('hidden');\n                select.removeClass('hidden');\n            } else {\n                label.addClass('hidden');\n                select.addClass('hidden');\n            }\n        });\n\n    }\n\n\n    if (typeof acf.add_action !== 'undefined') {\n\n        /*\n         *  ready append (ACF5)\n         *\n         *  These are 2 events which are fired during the page load\n         *  ready = on page load similar to $(document).ready()\n         *  append = on new DOM elements appended via repeater field\n         *\n         *  @type\tevent\n         *  @date\t20/07/13\n         *\n         *  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n         *  @return\tn/a\n         */\n\n        acf.add_action('ready append', function ($el) {\n\n            // search $el for fields of type 'FIELD_NAME'\n            acf.get_fields({type: 'yandex-map'}, $el).each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    } else {\n\n\n        /*\n         *  acf/setup_fields (ACF4)\n         *\n         *  This event is triggered when ACF adds any new elements to the DOM.\n         *\n         *  @type\tfunction\n         *  @since\t1.0.0\n         *  @date\t01/01/12\n         *\n         *  @param\tevent\t\te: an event object. This can be ignored\n         *  @param\tElement\t\tpostbox: An element which contains the new HTML\n         *\n         *  @return\tn/a\n         */\n\n        $(document).on('acf/setup_fields', function (e, postbox) {\n\n            $(postbox).find('.field[data-field_type=\"yandex-map\"]').each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    }\n\n\n})(jQuery);"]}