{"version":3,"sources":["acf-yandex-map.js"],"names":["$","plugin_url","acf_yandex_locale","mark_style_house_green","iconLayout","iconImageHref","iconImageSize","iconImageOffset","mark_style_house_orange","mark_style_house_yellow","mark_style_house_red","mark_style_house_gray","polygon_style_green","fillColor","strokeColor","strokeWidth","opacity","polygon_style_orange","polygon_style_yellow","polygon_style_red","polygon_style_gray","postID","blog_url","template_url","post_id","term_slug","post_type","term_id","is_project","initialize_field","$el","$element","$input","$params","$collection","$map_active","$map","$project","find","undefined","console","error","map_init_fail","create_mark","coords","type","id","place_mark","marker_type","toLowerCase","val","log","marks","length","draggable","ymaps","Placemark","geoObjects","add","editorDrawingCursor","editorMaxPoints","Polygon","editor","startDrawing","Monitor","state","newValue","events","save_map","attr","zoom","getZoom","getCenter","center_lat","center_lng","getType","split","each","mark","geometry","_type","push","content","getCoordinates","JSON","stringify","parseJSON","post","url","ajaxurl","data","action","name","done","response","features","index","coordinates","status","slug","fail","ready","empty","destroy","Map","center","minZoom","controls","remove","behaviors","disable","copyrights","e","get","zoom_control","control","ZoomControl","event","top","left","clear_button","Button","btn_clear_all","title","btn_clear_all_hint","options","selectOnClick","removeAttr","right","geo_button","location","el","collect","NaN","text","geocode","results","then","res","geo_object","bounds","properties","setBounds","checkZoomRange","geocode_location","alert","GeoObjectCollection","preset","mark_id","edit_url","window","origin","place_mark_content","balloonContentBody","hintContent","mark_style","polygon_style","import_mark","getBounds","map_init","acf","add_action","get_fields","this","document","on","postbox","jQuery"],"mappings":"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","file":"acf-yandex-map.min.js","sourcesContent":["(function ($) {\n\n    'use strict';\n\n    /**\n     * Plugin url\n     */\n    var plugin_url = acf_yandex_locale.plugin_url;\n\n    /**\n     * Include common vars\n     */\n    // Common vars\n    \n    var mark_style_house_green = {\n        iconLayout: 'default#image',\n        iconImageHref: plugin_url + 'svg/mark-house-green.svg',\n        iconImageSize: [36, 36],\n        iconImageOffset: [-18, -36]\n    };\n    \n    var mark_style_house_orange = {\n        iconLayout: 'default#image',\n        iconImageHref: plugin_url + 'svg/mark-house-orange.svg',\n        iconImageSize: [36, 36],\n        iconImageOffset: [-18, -36]\n    };\n    \n    var mark_style_house_yellow = {\n        iconLayout: 'default#image',\n        iconImageHref: plugin_url + 'svg/mark-house-yellow.svg',\n        iconImageSize: [36, 36],\n        iconImageOffset: [-18, -36]\n    };\n    \n    var mark_style_house_red = {\n        iconLayout: 'default#image',\n        iconImageHref: plugin_url + 'svg/mark-house-red.svg',\n        iconImageSize: [36, 36],\n        iconImageOffset: [-18, -36]\n    };\n    \n    var mark_style_house_gray = {\n        iconLayout: 'default#image',\n        iconImageHref: plugin_url + 'svg/mark-house-gray.svg',\n        iconImageSize: [36, 36],\n        iconImageOffset: [-18, -36]\n    };\n    \n    var polygon_style_green = {\n        fillColor: '#44A147',\n        strokeColor: '#18803F',\n        strokeWidth: 2,\n        opacity: 0.7\n    };\n    \n    var polygon_style_orange = {\n        // fillColor: 'rgba(0,0,0,0.00)',\n        fillColor: '#E3D5B1',\n        strokeColor: '#EC6B23',\n        strokeWidth: 2,\n        opacity: 0.7\n    };\n    \n    var polygon_style_yellow = {\n        fillColor: '#FFEE8B',\n        strokeColor: '#FFDE17',\n        strokeWidth: 2,\n        opacity: 0.7\n    };\n    \n    var polygon_style_red = {\n        fillColor: '#F7A09A',\n        strokeColor: '#ED1C25',\n        strokeWidth: 2,\n        opacity: 0.7\n    };\n    \n    var polygon_style_gray = {\n        fillColor: '#A3ACB2',\n        strokeColor: '#88959E',\n        strokeWidth: 2,\n        opacity: 0.7\n    };\n\n    /**\n     * Backend vars\n     */\n    var blogURL = acf_yandex_locale.blog_url;\n    var templateURL = acf_yandex_locale.template_url;\n    var postID = acf_yandex_locale.post_id;\n    var postType = acf_yandex_locale.post_type;\n    var termID = acf_yandex_locale.term_id;\n    var term_slug = acf_yandex_locale.term_slug;\n    var is_project = (acf_yandex_locale.is_project) ? true : false;\n\n    /**\n     * Initialize admin interface\n     *\n     * @param {element} $el\n     * @returns {boolean}\n     */\n    function initialize_field($el) {\n\n        /**\n         * Element for map init\n         * @type {element}\n         */\n        var $element;\n\n        /**\n         * Hidden data input\n         * @type {element}\n         */\n        var $input;\n\n        /**\n         * Saved data or default\n         *\n         * @param {float} $params.center_lat\n         * @param {float} $params.center_lng\n         * @param {string} $params.type\n         * @param {int} $params.zoom\n         * @param {Object[]} $params.marks\n         *\n         * @type {object}\n         */\n        var $params;\n\n        /**\n         * Yandex map object\n         *\n         * @type {Object}\n         */\n        var $map = null;\n\n        /**\n         * Project objects\n         *\n         * @type {array}\n         */\n        var $project = [];\n\n        /**\n         * Project collection\n         *\n         * @type {object}\n         */\n        var $collection;\n\n        /**\n         * Project collection\n         *\n         * @type {boolean}\n         */\n        var $map_active;\n\n        /// Init fields\n\n        $element = $($el).find('.map');\n        $input = ($el).find('.map-input');\n\n        if ($element == undefined || $input == undefined) {\n            console.error(acf_yandex_locale.map_init_fail);\n            return false;\n        }\n\n        /// Init params\n\n        $params = $.parseJSON($($input).val());\n\n        /// Import data & map init\n\n        if ( (term_slug != 'no-project' && term_slug != undefined) || is_project ) {\n\n            console.log('Import start');\n            console.log(term_slug);\n\n            // var data = plugin_url + 'json/land-' + term_slug + '.json';\n\n            // $.when(\n\n                $.post({\n                    url: ajaxurl,\n                    data: {\n                        action: 'ymaps_json_post',\n                        data: {\n                            type: 'project',\n                            name: term_slug\n                        }\n                    }\n                })\n                .done(function(response) {\n                    // console.log(data);\n\n                    var data = $.parseJSON(response);\n\n                    if ( data.features.length > 0 ) {\n\n                        $.each(data.features, function(index, val) {\n                            $project[index] = {\n                                \"id\": val.id,\n                                \"content\": val.id,\n                                \"type\": val.geometry.type,\n                                \"coords\": val.geometry.coordinates,\n                                \"status\": (val.status) ? val.status.slug : false\n                            };\n                        });\n\n                        console.log('Map data loaded');\n\n                    } else {\n\n                        console.error(\"Map data error\");\n                    };\n                    // $map.setBounds($map.geoObjects.getBounds(), {\n                    //     checkZoomRange: true\n                    // });\n                })\n                .fail(function() {\n                //     console.error(\"Map data error\");\n                });\n\n                // $.get(data, function(response) {\n\n                //     if ( response.features.length > 0 ) {\n\n                //         $.each(response.features, function(index, val) {\n                //             $project[index] = {\n                //                 \"id\": val.id,\n                //                 \"content\": val.id,\n                //                 \"type\": val.geometry.type,\n                //                 \"coords\": val.geometry.coordinates\n                //             };\n                //         });\n\n                //     } else {\n\n                //         console.error('Data import error!');\n\n                //     }\n\n                // })\n\n            // ).done(function() {\n\n                console.log('Import success & map start');\n\n            //     ymaps.ready(function () {\n            //         // let's go\n            //         map_init();\n            //     });\n\n            // }).fail(function() {\n\n            //     console.error('Data import error!');\n\n            //     console.log('Just map start');\n\n            //     ymaps.ready(function () {\n            //         // let's go\n            //         map_init();\n            //     });\n\n            // });\n\n        } else {\n\n            console.log('Just map start');\n\n        }\n\n            ymaps.ready(function () {\n                // let's go\n                map_init();\n            });\n\n        // };\n\n        /**\n         * Initialization Map\n         */\n        function map_init() {\n\n            $element.empty();\n\n            if ($map != null) {\n                $map.destroy();\n                $map = null;\n                $input.val('');\n            }\n\n            $map = new ymaps.Map($element[0], {\n                zoom: $params.zoom,\n                center: [$params.center_lat, $params.center_lng],\n                type: 'yandex#' + $params.type\n            }, {\n                minZoom: 10\n            });\n\n            $map.controls.remove('trafficControl');\n            $map.controls.remove('fullscreenControl');\n            $map.controls.remove('searchControl');\n            $map.controls.remove('geolocationControl')\n            $map.behaviors.disable('scrollZoom');\n            $map.copyrights.add('&copy; DKI ');\n\n            if (!is_project) {\n                $map.events.add('click', function (e) {\n                    if ($map_active) {\n                        create_mark(e.get('coords'));\n                        save_map();\n                    }\n                });\n            }\n\n            $map.events.add('typechange', function (e) {\n                save_map();\n            });\n\n            $map.events.add('boundschange', function () {\n                save_map();\n            });\n\n            /// Zoom Control\n\n            var zoom_control = new ymaps.control.ZoomControl();\n            zoom_control.events.add('zoomchange', function (event) {\n                save_map();\n            });\n\n            $map.controls.add(zoom_control, {top: 75, left: 5});\n\n            /// Clear all button\n\n            var clear_button = new ymaps.control.Button({\n                data: {\n                    content: acf_yandex_locale.btn_clear_all,\n                    title: acf_yandex_locale.btn_clear_all_hint\n                },\n                options: {\n                    selectOnClick: false\n                }\n            });\n\n            clear_button.events.add('click', function () {\n                $map.geoObjects.each(function (mark) {\n                    if (mark.geometry != null) { // if not collection\n                        $map.geoObjects.remove(mark);\n                    };\n                });\n                $map_active = true;\n                $('.marker-type').removeAttr('disabled');\n                save_map();\n            });\n\n            if (!is_project) {\n                $map.controls.add(clear_button, {top: 5, right: 5});\n            };\n\n            /// Geocoding button\n\n            var geo_button = new ymaps.control.Button('Найти');\n\n            geo_button.events.add('click', function () {\n                // remove object mark\n                $map.geoObjects.each(function (mark) {\n                    if (mark.geometry != null) { // if not collection\n                        $map.geoObjects.remove(mark);\n                    };\n                });\n\n                // get address\n                var location = '';\n\n                $('.js-location').each(function(index, el) {\n                    function collect(el) {\n                        if (el != undefined && el != NaN && el != null && el) {\n                            location += el;\n                        }\n                    }\n                    collect($(el).find('textarea').val());\n                    collect($(el).find('input').val());\n                    collect($(el).find('select option[selected=\"selected\"]').text());\n                });\n\n                if ( location ) {\n                    // use gecoder\n                    geocode_location(location);\n                } else {\n                    alert('Объект не найден');\n                };\n            });\n\n            if (!is_project) {\n                $map.controls.add(geo_button);\n            };\n\n            /// Collection\n\n            $collection = new ymaps.GeoObjectCollection(null, {\n                preset: 'islands#yellowIcon'\n            });\n\n            /// Marks import\n\n            $($project).each(function(index, mark) {\n                if (mark.id != postID) { // if not this post\n                    import_mark(mark.coords, mark.type, mark.id, mark.status);\n                }\n            });\n\n            /// Import load\n\n            $map.geoObjects.add($collection);\n\n            /// Marks load\n\n            $($params.marks).each(function (index, mark) {\n                create_mark(mark.coords, mark.type, mark.id, mark.content);\n            });\n\n            /// Misc\n            if (is_project) {\n                $map.setBounds($map.geoObjects.getBounds(), {\n                    checkZoomRange: true\n                });\n            }\n        }\n\n        /**\n         * Import geo mark\n         *\n         * @param {Array} coords\n         * @param {int} term\n         * @param {int} id\n         */\n        function import_mark(coords, type, id, status) {\n\n            var place_mark = null;\n            var marker_type = type.toLowerCase();\n            var mark_id = id;\n            var edit_url = window.location.origin + '/wp-admin/post.php?post=' + mark_id + '&action=edit';\n\n            var place_mark_content = {\n                balloonContentBody: '<span>Объект №' + mark_id + '</span><br><a href=\"' + edit_url + '\">Редактировать</a>',\n                hintContent: mark_id\n            }\n\n            if (marker_type == 'point') { // create placemark\n\n                console.log(is_project);\n\n                var mark_style;\n\n                if ( is_project ) { // project admin page\n\n                    switch(status) {\n                        case 'vacant':\n                            mark_style = mark_style_house_green;\n                            break;\n                        case 'reserved':\n                            mark_style = mark_style_house_yellow;\n                            break;\n                        case 'booked':\n                            mark_style = mark_style_house_red;\n                            break;\n                        default :\n                            mark_style = mark_style_house_gray;\n                            break;\n                    }\n\n                } else {\n                    mark_style = mark_style_house_orange;\n                }\n\n                place_mark = new ymaps.Placemark(\n                    coords,\n                    place_mark_content,\n                    mark_style\n                );\n\n                $collection.add(place_mark);\n\n            } else if (marker_type == 'polygon') {\n\n                var polygon_style;\n\n                if ( is_project ) { // project admin page\n\n                    switch(status) {\n                        case 'vacant':\n                            polygon_style = polygon_style_green;\n                            break;\n                        case 'reserved':\n                            polygon_style = polygon_style_yellow;\n                            break;\n                        case 'booked':\n                            polygon_style = polygon_style_red;\n                            break;\n                        default :\n                            polygon_style = polygon_style_gray;\n                            break;\n                    }\n\n                } else {\n                    polygon_style = polygon_style_orange;\n                }\n\n                place_mark = new ymaps.Polygon(\n                    coords,\n                    place_mark_content,\n                    polygon_style\n                );\n\n                $collection.add(place_mark);\n\n            } else {\n\n                console.log('Object ' + id + ' without coordinates');\n\n            }\n        }\n\n        /**\n         * Create geo mark\n         *\n         * @param {Array} coords\n         * @param {string} type Point type, Point\n         * @param {int} id\n         * @param {string} content\n         */\n        function create_mark(coords, type, id, content) {\n\n            var place_mark = null;\n            var marker_type = (type != null) ? type.toLowerCase() : $($el).find('.marker-type').val();\n\n            console.log(marker_type);\n\n            var mark_id = id;\n            if (id == undefined && $params.marks.length == 0)\n                mark_id = 1;\n            else\n                mark_id = (id == undefined) ? ($params.marks[$params.marks.length - 1].id + 1) : id;\n\n            var mark_content = (content == undefined) ? '' : content;\n\n            if (marker_type == 'point') { // create placemark\n\n                mark_style_house_green.draggable = true;\n\n                place_mark = new ymaps.Placemark(\n                    coords,\n                    {},\n                    mark_style_house_green\n                );\n\n                $map.geoObjects.add(place_mark);\n\n                $map_active = false;\n\n            } else if (marker_type == 'polygon') { // if mark is polygon\n\n                if (coords.length === 2) {\n                    coords = [];\n                };\n\n                polygon_style_green.editorDrawingCursor = 'crosshair';\n                polygon_style_green.editorMaxPoints = 5;\n\n                var place_mark = new ymaps.Polygon(\n                    coords, \n                    {}, \n                    polygon_style_green \n                );\n\n                $map.geoObjects.add(place_mark);\n\n                place_mark.editor.startDrawing();\n\n                var stateMonitor = new ymaps.Monitor(place_mark.editor.state);\n                stateMonitor.add(\"drawing\", function (newValue) {\n                    $map_active = false;\n                });\n\n            } else {\n\n                console.error('Marker type error!');\n                return false;\n\n            }\n\n            place_mark.events.add('dragend', function () {\n                save_map();\n            });\n            place_mark.events.add('editorstatechange', function () {\n                save_map();\n            });\n            place_mark.events.add('geometrychange', function () {\n                save_map();\n            });\n\n            $('.marker-type').val(marker_type).attr('disabled', 'true');\n        }\n\n        /**\n         * Write map data in hidden field\n         */\n        function save_map() {\n\n            $params.zoom = $map.getZoom();\n\n            var coords = $map.getCenter();\n            $params.center_lat = coords[0];\n            $params.center_lng = coords[1];\n\n            var type = $map.getType().split('#');\n            $params.type = (type[1]) ? type[1] : 'map';\n\n            var marks = [];\n            $map.geoObjects.each(function (mark) {\n                if (mark.geometry != null) { // if not collection\n                    var _type = mark.geometry.getType();\n                    marks.push({\n                        id: postID,\n                        content: content,\n                        type: _type,\n                        coords: mark.geometry.getCoordinates()\n                    });\n                };\n            });\n\n            $params.marks = marks;\n\n            $($input).val(JSON.stringify($params));\n        }\n\n        /**\n         * Geocode object address\n         */\n        function geocode_location(location) {\n\n            ymaps.geocode(location, {\n                results: 1\n            }).then(function (res) {\n                var geo_object = res.geoObjects.get(0);\n                var coords = geo_object.geometry.getCoordinates();\n                var bounds = geo_object.properties.get('boundedBy');\n                var content = location;\n\n                create_mark(coords, 'point', postID, content);\n\n                $map.setBounds(bounds, {\n                    checkZoomRange: true\n                });\n\n                save_map();\n            });\n        }\n\n    }\n\n\n    if (typeof acf.add_action !== 'undefined') {\n\n        /*\n         *  ready append (ACF5)\n         *\n         *  These are 2 events which are fired during the page load\n         *  ready = on page load similar to $(document).ready()\n         *  append = on new DOM elements appended via repeater field\n         *\n         *  @type\tevent\n         *  @date\t20/07/13\n         *\n         *  @param\t$el (jQuery selection) the jQuery element which contains the ACF fields\n         *  @return\tn/a\n         */\n\n        acf.add_action('ready append', function ($el) {\n\n            // search $el for fields of type 'FIELD_NAME'\n            acf.get_fields({type: 'yandex-map'}, $el).each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    } else {\n\n\n        /*\n         *  acf/setup_fields (ACF4)\n         *\n         *  This event is triggered when ACF adds any new elements to the DOM.\n         *\n         *  @type\tfunction\n         *  @since\t1.0.0\n         *  @date\t01/01/12\n         *\n         *  @param\tevent\t\te: an event object. This can be ignored\n         *  @param\tElement\t\tpostbox: An element which contains the new HTML\n         *\n         *  @return\tn/a\n         */\n\n        $(document).on('acf/setup_fields', function (e, postbox) {\n\n            $(postbox).find('.field[data-field_type=\"yandex-map\"]').each(function () {\n\n                initialize_field($(this));\n\n            });\n\n        });\n\n\n    }\n\n\n})(jQuery);"]}